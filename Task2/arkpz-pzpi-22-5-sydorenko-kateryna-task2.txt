
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»


ЗВІТ
з лабораторної роботи  № 2
з дисципліни «Аналіз та рефакторінг коду»



Виконав (ла)					Прийняв (ла): Дашенков Д. С.
ст. гр. ___ПЗПІ-22-5_____
Сидоренко Катерина Сергіївна







Харків 2024





2. РОЗРОБКА БАЗИ ДАНИХ ДЛЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ ТА ПРИКЛАДНОГО ПРОГРАМНОГО ІНТЕРФЕЙСУ (API).

     2.1 Мета заняття
     
     Розробити базу даних для серверної частини  програмної системи та прикладного програмного інтерфейсу.
     
2.2  Хід виконання роботи 
     
     2.2.1 Розробити будову програмної системи.

     Була обрана модульна монолітна архітектура, що забезпечує звязуюючи повязану логіку в одному місці (модулі), уникаючи при цьому складності розподілених систем. Так як деякі частини модулі потенційно мужуть бути високонагружені, тому використовується коммунікація на основі подій між модулями (асинхронний тип), щоб у майбутньому була можливість винести такі частини. Чиста архітектура використовується в основних модулях (наприклад, «Ресторани», «Технологічні картки»), щоб забезпечити довготривалу підтримку, можливість тестування та розподіл обов'язків. Для модулів, орієнтованих на роботу з простими операціями використовувається Архітектура вертикального зрізу, що спрощує розробку, зосереджуючись на функціональному, автономному дизайні. Такий підхід забезпечує гнучку систему, яку легко підтримувати, і яка підтримує майбутнє зростання та потенційний перехід до мікросервісів.

     2.2.2 Створити UML діаграму прецедентів для серверної частини системи.
     
Створена UML діаграма наведена у додатку А рис. А.1. Далі буде наведено 
опис основних use cases:
	1. Керування особистим кабінетом (MVP)
     Дійові особи: Шеф-кухар, Менеджер, Постачальник, Адміністратор
     Опис: Цей варіант використання дозволяє акторам керувати налаштуваннями своїх облікових записів, включаючи оновлення особистої інформації, зміну паролів та управління налаштуваннями. Система забезпечує доступ на основі ролей і привілеїв для кожного типу користувачів. 
     
     2. Реєстрація ресторану/постачальника (MVP)
     Актори: Адміністратор
     Опис: Цей варіант використання підтримує реєстрацію нових суб'єктів (ресторанів або постачальників). Він був розроблений для того, щоб пристосуватись до структури системи, що складається з декількох суб'єктів, гарантуючи, що Адміністратор може безперешкодно реєструвати нових учасників, одночасно фіксуючи відповідні деталі для оперативного управління.
     
3. Заповнення профілів облікових записів (MVP)
Дійові особи: Адміністратор
     Опис: Дозволяє адміністраторам заповнювати профілі користувачів для зареєстрованих організацій. 
     
     4. Налаштування системних зав’язків 
     Дійові особи: Менеджер, Адміністратор
     Опис: Цей варіант використання дозволяє пов'язати компоненти системи, наприклад, ресторани зі складами або постачальників з інвентарними позиціями. 
     
     5. Вибір рецепту (MVP)
     Дійові особи: Шеф-кухар
     Опис: Шеф-кухар може переглядати та обирати рецепти з системи. Процес пов'язує модулі «Рецепт» і «Технічна карта», допомагаючи шеф-кухарю плавно перейти до етапу вибору інгредієнтів. 
     
     6. Вибір інгредієнтів (MVP)
     Дійові особи: Шеф-кухар
     Опис: Після вибору рецепту шеф-кухар може вибрати конкретні інгредієнти з рецепту.
     
     7. Вимірювання інгредієнтів (MVP)
     Дійові особи: Шеф-кухар
     Опис: Цей варіант використання обробляє вимірювання інгредієнтів, використовуючи ваги Інтернету речей або ручне введення. Кожне вимірювання пов'язане з обраним рецептом та інвентарем, що забезпечує збір та реєстрацію даних в режимі реального часу. Він розширює функцію Notify Missing/Deviations, щоб попередити шеф-кухаря про відсутність або недостатню кількість інгредієнтів - функцію, додану для запобігання збоїв у приготуванні їжі.
     
8. Інвентаризація доступу (MVP)
Дійові особи: Шеф-кухар, Менеджер
     Опис: Цей варіант використання надає видимість поточного рівня запасів. Шеф-кухарі можуть перевіряти наявність продуктів, а менеджери - аналізувати тенденції запасів. 
     
9. Сповіщення про нестачу/відхилення
Дійові особи: Шеф-кухар
     Опис: Цей варіант використання запускає сповіщення, коли вимірювання або інгредієнти відхиляються від очікуваних значень (наприклад, відсутній запас або помилки у вимірюванні). 

10. Автоматичне списання (MVP)
Виконавці: Шеф-кухар
     Опис: Після завершення вимірювань система автоматично розраховує і реєструє списання інгредієнтів. Це включає відрахування з запасів та оновлення стану складу, що узгоджується з функціями модуля «Управління запасами», орієнтованими на автоматизацію.
     
11. Реєстрація змін запасів (MVP)
Дійові особи: Менеджер
     Опис: Дозволяє менеджерам вручну реєструвати зміни в рівнях запасів, такі як імпорт, виправлення або масові оновлення. Це розширює можливості Управління запасами для забезпечення гнучкості в управлінні запасами.
     
     12. Автоматичне управління запасами 
     Дійові особи: Менеджер
     Опис: Цей модуль слугує основою операцій з запасами, автоматизуючи такі процеси, як списання, прогнозування та звітність. Він агрегує дані з інших модулів (наприклад, вимірювання та імпорт), щоб підтримувати точний та актуальний стан складу.
     
13. Завантаження технічних карток рецептів (MVP)
Дійові особи: Менеджер
     Опис: Менеджери можуть завантажувати та керувати технічними картками, які містять інструкції до рецептів, інгредієнти та пропорції. Ця функція безпосередньо пов'язана з Керуванням рецептами і забезпечує стандартизацію та ефективність робочих процесів на кухні.
     
14. Прогнозування запасів
Дійові особи: Менеджер
     Опис: На основі історичних даних система прогнозує майбутні потреби в запасах, допомагаючи менеджерам планувати імпорт та запобігати дефіциту. Вона була розроблена як частина розширеної аналітики для проактивного управління запасами.
     
15. Створення звітів
Дійові особи: Менеджер
     Опис: Ця функція надає детальні звіти про запаси, використання та фінансові показники, пристосовані для прийняття стратегічних рішень. Функція інтегрує дані з різних модулів для надання дієвої інформації.

     16. Сповіщення про термін придатності
     Дійові особи: Менеджер
     Опис: Цей варіант використання сповіщає менеджерів про товари, термін придатності яких наближається до завершення, забезпечуючи своєчасне використання або утилізацію. Його було додано для мінімізації відходів і підтримки дотримання стандартів безпеки харчових продуктів.

17. Автоматична реєстрація доходів
Дійові особи: Менеджер
Опис: Автоматично реєструє операції з запасами, пов'язані з імпортом від 
постачальників, забезпечуючи синхронізацію фінансових записів з оновленнями запасів. 

18. Запити на основі аналітики
Дійові особи: Постачальник
     Опис: Постачальники отримують запити на поповнення запасів на основі аналітики, згенеровані системою, що дозволяє проактивно поповнювати запаси. 

19. Управління замовленнями
Дійові особи: Менеджер
     Опис: Менеджери контролюють та управляють замовленнями на нові запаси, забезпечуючи відповідність між попитом ресторану та поставками постачальника. 
     
20. Управління продуктами
Виконавці: Постачальник
     Опис: Постачальники можуть керувати списками своїх продуктів та їх наявністю, гарантуючи, що ресторани отримують точну та актуальну інформацію про запаси.
21. Відстеження доставки
Дійові особи: Постачальник
     Опис: Відстежує доставку замовлень, надаючи менеджерам оновлення статусу. Включає та розширює функцію управління замовленнями, пропонуючи відстеження в режимі реального часу та оптимізовану логістику.

2.2.3 Створити ER діаграму даних.

     Отриману в результати виконання цього пункту діаграму можна
переглянути у додатку А рис. А.2.
Основні сутності
1. Користувач, Роль і Дозволи
o Ці сутності формують основу механізму контролю доступу:
* Користувач (User) представляє осіб, які взаємодіють із системою, таких як шеф-кухарі, менеджери, постачальники та адміністратори.
* Роль (Role) визначає категорії користувачів (наприклад, шеф-кухар, менеджер) і асоціює їх із відповідними діями.
2. Ресторан
o Представляє організацію (ресторан або постачальника), з якою пов’язані користувачі. Ресторани пов'язані зі складами для відстеження запасів.
Сутності управління запасами
3. Склад
o Представляє фізичні або віртуальні місця, де зберігаються інгредієнти. Відстежує стани запасів і підтримує імпорт та списання.
4. Інгредієнт
o Представляє сировину, яка використовується в рецептах. Є центральною ланкою операцій складу та управління рецептами.
5. Стан складу (WarehouseState)
o Відображає поточну кількість кожного інгредієнта на складі та фіксує оновлення на основі транзакцій чи використання.
6. Імпорт
o Фіксує вхідні транзакції запасів, пов’язуючи певні кількості інгредієнтів із складами.
7. Списання
o Відстежує зменшення запасів (наприклад, через псування або використання в рецептах), забезпечуючи точність рівнів запасів.
Сутності управління рецептами
8. Технічна картка
o Містить детальні інструкції щодо приготування рецепта, забезпечуючи послідовність роботи на кухні.
9. Інгредієнти в техкарті
o Містить пропорції інгредієнтів, необхідних для кожного рецепта, забезпечуючи зв’язок між рецептами та запасами.
Вимірювання та IoT-інтеграція
11. Токен вимірювання (MeasurementToken)
o Унікальний ідентифікатор, що відстежує події вимірювання інгредієнтів. Зв’язує шеф-кухарів, рецепти та інгредієнти для реєстрації даних у реальному часі.
12. Вимірювання
o Реєструє вагу та час вимірювання інгредієнтів. Містить метадані, такі як статус стабільності та події видалення.
13. Події ваги (ScaleEvent)
o Відстежує конкретні події на IoT-вагах, такі як додавання чи видалення ваги, а також стабілізація.

2.2.4 Створити діаграму структури БД. Схема БД зображено в додатку A
на рисунку А.3.

2.2.5 Розробити функції роботи з БД (ORM або CoRM тощо). Для роботи з 
базою даною PostgreSQL було обрано ORM – Entity Framework та відповідний провайдер. У деяких модулях з Virtical Slice Architecture використовується DbContext, a у модулях з Clean Architecture використовується Repository патерн.

2.2.6 Розробити API (REST або GraphQL, gRPC тощо) для взаємодії 
серверної частини з клієнтами та створена специфікація розробленого API за допомогою Swashbuckle – бібліотека для автогенерації специфікації ендпоентів.

2.2.7 Створити програмну реалізацію розробленого API та функцій роботи 
з БД.

2.2.8 Перевірити роботу створеного програмного коду серверної частини 
системи.
     
     
     2.3 Висновки
     
     На даній лабораторній роботі були здобуті навички розробки баз даних для серверної частини програмних систем та прикладних інтерфейсів.


     ДОДАТОК А
     
     Вихідні діаграми виконаної роботи
     
     Рисунок А.1 – UML діаграма
     




Рисунок А.2 – ER діаграма

Рисунок А.3 – Схема БД


Рисунок А.4 – Вікно Swagger
0

