Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії



ЗВІТ
до приктичного заняття 1
з дисципліни "Аналіз та рефакторінг коду"
на тему: "Правила оформлення програмного коду"




Виконав ст. гр ПЗПІ-22-5
Сидоренко Катерина Сергіївна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович







Харків 2024

1 МЕТА

     Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчити аналізувати та рефакторити код для покращення його якості.


2 ЗАВДАННЯ

     Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.

3 ХІД РОБОТИ

	Була обрана пова програмування SQL. SQL (Structured Query Language - мова структурованих запитів) - це декларативна мова програмування, яка використовується для взаємодії з реляційними базами даних. Вона дозволяє користувачам ефективно отримувати, маніпулювати та керувати даними. Однак, код SQL може стати складним і важким в обслуговуванні без належної стилізації коду.
     Основними типами рекомендацій, що були розглянуті під час практичного заняття є стильові рекомендації, оптимізація продуктивності, тестування та документування коду. Наприклад, написання по одному елементу в рядку в SQL коді, leading кома – ці правила надають можливість ефективного розуміння коду та подальшого тестування, дебагінгу.CTE для перевикористання частин код та запис результату виконання цього виразу до віртуальної таблиці, що дозволяє оптимізувати виконання запитів, що потребують даної інформації в рамках транзакції. Також було розглянуто використання коментарів як спосіб документування коду, пояснення певних рішень у той чи інший момент часу. Були створені частини коду, що використовувалися для демонстрації використання цих рекомендацій. Результат цієї роботи можна переглянути у додатку А.
	Рекомендація написання по одному елементу в рядку та  кома на початку. Ця практика передбачає розміщення одного стовпчика, умови або елемента в рядку, з комами на початку кожного рядка. Ця практика використання цієї рекомендації забезпечує кращу читабельність завдяки створенню чистого, структурованого формату. Зменшує ризик синтаксичних помилок, особливо при зміні списків стовпців або умов. Наслідки ігнорування цього правила є запити стають важкими для читання та обслуговування, закриваючі коми збільшують ймовірність помилок при додаванні нових елементів. Під час роботи з кодом ці рекомендація надає покращення співпраці між членами команди, спрощення контролю версій, ізолюючи зміни в окремих рядках.
	Рекомендація написання коментаів. Ця практика передбачає використання як однорядкових, так і багаторядкових коментарів для пояснення складної логіки, документування мети запиту або певних його частин. Використання цієї рекомендації сприяє кращому розумінню бізнес-логіки SQL-запитів, особливо в командній роботі. Це також полегшує подальші модифікації та підтримку коду. Наслідки ігнорування цього правила: відсутність коментарів може ускладнити розуміння та підтримку коду іншими розробниками, зробивши його більш схильним до помилок. Під час роботи з кодом ця рекомендація забезпечує краще документування логіки, що зменшує час на дебаг і спрощує співпрацю між командами.
	Рекомендація використання CTE та їх написання змістовних назви. Ця практика передбачає використання загальних табличних виразів (CTE) для ізоляції окремих частин запиту та присвоєння їм описових назв, що пояснюють їхню мету. Використання цієї рекомендації підвищує читабельність коду, дозволяючи розбити складні запити на логічні частини. Описові назви CTE дозволяють швидко зрозуміти їх призначення, знижуючи когнітивне навантаження. Наслідки ігнорування цього правила: складні запити стають важкими для читання, особливо з вкладеними підзапитами. Загальні або неконкретні назви, такі як cte1, не відображають призначення виразу, що може заплутати розробників. Під час роботи з кодом ця рекомендація дозволяє спростити налагодження, оптимізацію та розширення запитів, забезпечуючи їхню структурованість і зрозумілість.
     Рефакторинг існуючого SQL-коду є ключовим етапом підтримки його якості та продуктивності. Для цього слід виявляти дубльований або надто складний код і переносити його в окремі CTE, що дозволяє спростити структуру запитів. Важливо дотримуватись єдиних форматувальних правил для покращення читабельності, а також видаляти застарілі чи неактуальні частини коду, що можуть створювати плутанину або знижувати ефективність.
     Для аналізу якості коду використовуються інструменти, такі як SQL Server Management Studio (SSMS) для вивчення планів виконання запитів, SQL Prompt (Redgate) для рекомендацій щодо рефакторингу та форматування, і SolarWinds Database Performance Analyzer для виявлення вузьких місць у продуктивності. Тестування SQL-коду включає юніт-тестування окремих функцій за допомогою інструментів, таких як tSQLt, моделювання великих навантажень для перевірки продуктивності.
	Посилання на відеозвіт: https://youtu.be/Sm5Dq8NEq38 



ВИСНОВКИ

	Під час заняття я ознайомилася з основними рекомендаціями щодо написання чистого та підтримуваного SQL-коду. Використання таких підходів, як розміщення одного елемента в рядку з комою на початку, додавання коментарів та структуризація запитів за допомогою CTE, допомагає зробити код зрозумілішим і легшим у підтримці. 
     Особливу увагу було приділено рефакторингу коду, який дозволяє покращити його якість, видалити дублювання та підвищити продуктивність. Я також дзналася про інструменти для аналізу якості SQL-коду, такі як SQL Server Management Studio та SQL Prompt. 
     Застосування цих знань у практичних завданнях дозволить писати код, який відповідає сучасним вимогам до ефективності та підтримуваності. Заняття показало, наскільки важливо дотримуватись рекомендацій для забезпечення високої якості розробки програмного забезпечення.


ДОДАТОК А

Код для демонстрації рекомендацій

  1 -- RECOMMENDATION 1: One Item Per Line + Leading Comma
  2
  3 -- BAD PRACTICE:
  4 select p.FirstName as first_name, p.LastName as last_name, e.EmailAddress as email from [Person].Person p
  5 join [Person].EmailAddress e on e.BusinessEntityID = p.BusinessEntityID
  6 order by p.FirstName
  7
  8 -- GOOD PRACTICE:
  9 select
 10     p.FirstName as first_name
 11     , p.LastName as last_name
 12     , e.EmailAddress as email
 13 from
 14     [Person].person p
 15     join [Person].emailaddress e
 16         on e.BusinessEntityID = p.BusinessEntityID
 17 order by p.FirstName
 18
 19 -- RECOMMENDATION 2-3: Comments + СTE
 20
 21 -- BAD PRACTICE:
 22
 23 select
 24     c.AccountNumber as account_number
 25     , p.FirstName + ' ' + p.LastName as customer_name
 26     , sum(sod.LineTotal) as total_sales
 27 from sales.Customer c
 28     right join person.Person p
 29         on c.PersonID = p.BusinessEntityID
 30     join [Sales].SalesOrderHeader soh
 31         on c.CustomerID = soh.CustomerID
 32     join [Sales].SalesOrderDetail sod
 33         on soh.SalesOrderID = sod.SalesOrderID
 34     where soh.Status = 5 and c.PersonID is not null
 35 group by
 36     c.AccountNumber
 37     , p.FirstName + ' ' + p.LastName
 38
 39 -- GOOD PRACTICE:
 40
 41 /*
 42     Calculates the total sales amount of completed orders for each active customer.
 43     Business logic includes:
 44     1. Selecting only active customers.
 45     2. Joining sales data with customer information.
 46     3. Summing up the total sales per customer.
 47 */
 48
 49 GO
 50 with active_customers as (
 51     select
 52         c.AccountNumber as account_number
 53         , c.CustomerID as customer_id
 54         , p.FirstName + ' ' + p.LastName as customer_name
 55     from
 56         sales.Customer c
 57     right join person.Person p
 58         on c.PersonID = p.BusinessEntityID
 59     where
 60         c.PersonID is not null -- only include active customers
 61 )
 62
 63 -- OPTIMIZATION: Use table variables for better performance
 64 declare @ActiveCustomersTable table (
 65     account_number nvarchar(50),
 66     customer_id int,
 67     customer_name nvarchar(200)
 68 );
 69
 70 insert into @ActiveCustomersTable
 71     (
 72         account_number
 73         , customer_id
 74         , customer_name
 75     )
 76 select
 77     account_number
 78     , customer_id
 79     , customer_name
 80 from
 81     active_customers;
 82
 83 -- select * from @ActiveCustomersTable;
 84
 85 select
 86     ac.account_number as account_number
 87     , ac.customer_name as customer_name
 88     , sum(sod.LineTotal) as total_sales
 89 from @ActiveCustomersTable as ac
 90     join [Sales].SalesOrderHeader soh
 91         on ac.customer_id = soh.CustomerID
 92     join [Sales].SalesOrderDetail sod
 93         on soh.SalesOrderID = sod.SalesOrderID
 94     where soh.Status = 5 -- completed orders
 95 group by
 96     ac.account_number
 97     , ac.customer_name
 98
 99 GO



ДОДАТОК Б

Слайди презентації

Рисунок Б.1 – Титульна сторінка


Рисунок Б.2 – Вступ


Рисунок Б.3 – Рекомендація 1


Рисунок Б.4 – Приклади коду до рекомендації 1


Рисунок Б.5 – Рекомендація 2


Рисунок Б.6 – Рекомендація 3


Рисунок Б.7 – Приклади коду до рекомендації 2 та 3


Рисунок Б.8 – Приклади коду до рекомендації 2 та 3


Рисунок Б.9 – Приклади коду до рекомендації 2 та 3


Рисунок Б.10 – Висновки


Рисунок Б.10 – Список використаних джерел
0

